
// Code generated by go-connectilly-event-template, DO NOT EDIT.

package organizationv1

import (
    
      "encoding/json"
      "fmt"
    
      "time"
    
      "github.com/google/uuid"
    )
    
    // OrganizationEvent represents a OrganizationEvent model.
type OrganizationEvent struct {
  Metadata Metadata `json:"metadata"` 
  Data Data `json:"data"` 
}
    
    
    // Metadata represents a Metadata model.
type Metadata struct {
  Id uuid.UUID `json:"id"`  // The unique message ID
  Source string `json:"source"` 
  ReservedType ReservedType `json:"type"` 
  Subject string `json:"subject"` 
  Time time.Time `json:"time"` 
  CorrelationId uuid.UUID `json:"correlationId"` 
  Actor string `json:"actor"` 
}
    
    
    // ReservedType represents an enum of ReservedType.
type ReservedType uint

const (
  ReservedTypeOrganizationCreated ReservedType = iota
  ReservedTypeOrganizationUpdated
)

// Value returns the value of the enum.
func (op ReservedType) Value() any {
	if op >= ReservedType(len(ReservedTypeValues)) {
		return nil
	}
	return ReservedTypeValues[op]
}

var ReservedTypeValues = []any{"organizationCreated","organizationUpdated"}
var ValuesToReservedType = map[any]ReservedType{
  ReservedTypeValues[ReservedTypeOrganizationCreated]: ReservedTypeOrganizationCreated,
  ReservedTypeValues[ReservedTypeOrganizationUpdated]: ReservedTypeOrganizationUpdated,
}

    
    
    // Data represents a Data model.
type Data struct {
  BeforeState *Organization `json:"beforeState,omitempty"` 
  AfterState Organization `json:"afterState"` 
}
    
    
    // Organization represents a Organization model.
type Organization struct {
  Id int `json:"id"`  // The unique organization ID
  Name *string `json:"name,omitempty"`  // The organization name
  AdditionalProperties *map[string]interface{} `json:"additionalProperties,omitempty"` 
}
    
func (enumVal ReservedType) MarshalJSON() ([]byte, error) {
  return json.Marshal(enumVal.String())
}

func (enumVal ReservedType) String() string {
  return fmt.Sprintf("%v", ReservedTypeValues[int(enumVal)])
}

func (enumVal *ReservedType) UnmarshalJSON(buffer []byte) error {
  var str string
  if err := json.Unmarshal(buffer, &str); err != nil {
    return err
  }

  var tmpEnumVal ReservedType
  var ok bool

  if tmpEnumVal, ok = ValuesToReservedType[str]; !ok {
    return fmt.Errorf("unknown %s", str)
  }

  *enumVal = tmpEnumVal

  return nil
}
