// Code generated by MockGen. DO NOT EDIT.
// Source: client_event_producer_generator_service.go

// Package mock_generators is a generated GoMock package.
package mock_generators

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientEventProducerGeneratorService is a mock of ClientEventProducerGeneratorService interface.
type MockClientEventProducerGeneratorService struct {
	ctrl     *gomock.Controller
	recorder *MockClientEventProducerGeneratorServiceMockRecorder
}

// MockClientEventProducerGeneratorServiceMockRecorder is the mock recorder for MockClientEventProducerGeneratorService.
type MockClientEventProducerGeneratorServiceMockRecorder struct {
	mock *MockClientEventProducerGeneratorService
}

// NewMockClientEventProducerGeneratorService creates a new mock instance.
func NewMockClientEventProducerGeneratorService(ctrl *gomock.Controller) *MockClientEventProducerGeneratorService {
	mock := &MockClientEventProducerGeneratorService{ctrl: ctrl}
	mock.recorder = &MockClientEventProducerGeneratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientEventProducerGeneratorService) EXPECT() *MockClientEventProducerGeneratorServiceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockClientEventProducerGeneratorService) Generate(packageName, eventType, outputPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", packageName, eventType, outputPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockClientEventProducerGeneratorServiceMockRecorder) Generate(packageName, eventType, outputPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockClientEventProducerGeneratorService)(nil).Generate), packageName, eventType, outputPath)
}
