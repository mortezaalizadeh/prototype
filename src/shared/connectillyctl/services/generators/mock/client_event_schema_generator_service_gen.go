// Code generated by MockGen. DO NOT EDIT.
// Source: client_event_schema_generator_service.go

// Package mock_generators is a generated GoMock package.
package mock_generators

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientEventSchemaGeneratorService is a mock of ClientEventSchemaGeneratorService interface.
type MockClientEventSchemaGeneratorService struct {
	ctrl     *gomock.Controller
	recorder *MockClientEventSchemaGeneratorServiceMockRecorder
}

// MockClientEventSchemaGeneratorServiceMockRecorder is the mock recorder for MockClientEventSchemaGeneratorService.
type MockClientEventSchemaGeneratorServiceMockRecorder struct {
	mock *MockClientEventSchemaGeneratorService
}

// NewMockClientEventSchemaGeneratorService creates a new mock instance.
func NewMockClientEventSchemaGeneratorService(ctrl *gomock.Controller) *MockClientEventSchemaGeneratorService {
	mock := &MockClientEventSchemaGeneratorService{ctrl: ctrl}
	mock.recorder = &MockClientEventSchemaGeneratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientEventSchemaGeneratorService) EXPECT() *MockClientEventSchemaGeneratorServiceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockClientEventSchemaGeneratorService) Generate(protobufFilePath, outputPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", protobufFilePath, outputPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockClientEventSchemaGeneratorServiceMockRecorder) Generate(protobufFilePath, outputPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockClientEventSchemaGeneratorService)(nil).Generate), protobufFilePath, outputPath)
}
