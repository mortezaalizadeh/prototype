// Code generated by MockGen. DO NOT EDIT.
// Source: client_event_generate_generator_service.go

// Package mock_generators is a generated GoMock package.
package mock_generators

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientEventGenerateGeneratorService is a mock of ClientEventGenerateGeneratorService interface.
type MockClientEventGenerateGeneratorService struct {
	ctrl     *gomock.Controller
	recorder *MockClientEventGenerateGeneratorServiceMockRecorder
}

// MockClientEventGenerateGeneratorServiceMockRecorder is the mock recorder for MockClientEventGenerateGeneratorService.
type MockClientEventGenerateGeneratorServiceMockRecorder struct {
	mock *MockClientEventGenerateGeneratorService
}

// NewMockClientEventGenerateGeneratorService creates a new mock instance.
func NewMockClientEventGenerateGeneratorService(ctrl *gomock.Controller) *MockClientEventGenerateGeneratorService {
	mock := &MockClientEventGenerateGeneratorService{ctrl: ctrl}
	mock.recorder = &MockClientEventGenerateGeneratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientEventGenerateGeneratorService) EXPECT() *MockClientEventGenerateGeneratorServiceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockClientEventGenerateGeneratorService) Generate(packageName, outputPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", packageName, outputPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockClientEventGenerateGeneratorServiceMockRecorder) Generate(packageName, outputPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockClientEventGenerateGeneratorService)(nil).Generate), packageName, outputPath)
}
